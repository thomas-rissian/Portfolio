---
const { currentSlug, projectType = 'projet', technologies = [] } = Astro.props;

// Récupérer tous les projets
const allProjects = await Astro.glob('../../content/**/*.md');

// Fonction pour calculer le score de similarité
const calculateSimilarity = (project) => {
  let score = 0;
  const isNRProject = project.file.includes('/numerique-responsable/');
  const projectTechs = project.frontmatter.technologies || [];
  
  // Même type de projet = +5 points
  if ((isNRProject ? 'numerique-responsable' : 'projet') === projectType) {
    score += 5;
  }
  
  // Technologies en commun
  const commonTechs = technologies.filter(tech => projectTechs.includes(tech));
  score += commonTechs.length * 2;
  
  // Bonus si plus de 50% des technologies sont communes
  if (commonTechs.length > technologies.length / 2) {
    score += 3;
  }

  return score;
};

// Filtrer et préparer les projets similaires
const similarProjects = allProjects
  .filter(p => p.frontmatter.slug !== currentSlug)
  .map(project => ({
    ...project,
    similarityScore: calculateSimilarity(project)
  }))
  .filter(p => p.similarityScore > 0) // Ne garder que les projets ayant au moins une similarité
  .sort((a, b) => b.similarityScore - a.similarityScore)
  .slice(0, 2);
---

<div class="similar-projects">
  {similarProjects.length > 0 ? (
    <>
      <p class="suggestion-text">Projets recommandés :</p>
      <div class="project-links">
        {similarProjects.map(project => {
          const isNRProject = project.file.includes('/numerique-responsable/');
          const projType = isNRProject ? 'numerique-responsable' : 'projet';
          const title = project.frontmatter.title || project.frontmatter.titre;
          const commonTechs = (project.frontmatter.technologies || [])
            .filter(tech => technologies.includes(tech));
          
          return (
            <a href={`/${projType}/${project.frontmatter.slug}`} class="project-link">
              <div class="project-link-content">
                <div class="project-link-title">{title}</div>
                {commonTechs.length > 0 && (
                  <div class="common-techs">
                    Technologies communes : {commonTechs.slice(0, 3).join(', ')}
                    {commonTechs.length > 3 && ' ...'}
                  </div>
                )}
              </div>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M5 12h14M12 5l7 7-7 7"/>
              </svg>
            </a>
          );
        })}
      </div>
    </>
  ) : null}
</div>

<style>
  .similar-projects {
    margin-top: 3rem;
    border-top: 1px solid #22304a;
    padding-top: 1.5rem;
  }

  .suggestion-text {
    color: #5A82B2;
    font-size: 1rem;
    margin: 0 0 1rem;
    font-weight: 500;
  }

  .project-links {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .project-link {
    color: #dbeafe;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    padding: 1rem;
    border-radius: 0.5rem;
    background: rgba(90, 130, 178, 0.1);
    border: 1px solid #22304a;
    transition: all 0.2s ease;
  }

  .project-link:hover {
    background: rgba(90, 130, 178, 0.2);
    border-color: #5A82B2;
    transform: translateX(5px);
  }

  .project-link-content {
    flex: 1;
  }

  .project-link-title {
    font-size: 1.1rem;
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .common-techs {
    font-size: 0.9rem;
    color: #5A82B2;
  }

  .project-link svg {
    flex-shrink: 0;
    transition: transform 0.2s ease;
  }

  .project-link:hover svg {
    transform: translateX(4px);
  }
</style>
