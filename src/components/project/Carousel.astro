---
const { images } = Astro.props;
---

<div class="carousel">
  <div class="carousel-container">
    <div class="carousel-track" data-total={images.length}>
      {images.map((image, index) => (
        <div class="carousel-slide" data-index={index}>
          <img src={image.src} alt={image.alt} loading={index === 0 ? "eager" : "lazy"} />
          {image.caption && <div class="carousel-caption">{image.caption}</div>}
        </div>
      ))}
    </div>
    
    <button class="carousel-nav prev" aria-label="Image précédente">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M15 18l-6-6 6-6"/>
      </svg>
    </button>
    <button class="carousel-nav next" aria-label="Image suivante">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M9 18l6-6-6-6"/>
      </svg>
    </button>
  </div>
</div>

<style>
  .carousel {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 4rem auto;
    overflow: hidden;
    background: #151a21;
    border-radius: 1rem;
    padding: 3rem 0;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    height: 500px;
  }

  .carousel-track {
    position: absolute;
    display: flex;
    width: 100%;
    height: 100%;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide {
    position: absolute;
    width: 70%;
    height: 100%;
    left: 50%;
    opacity: 0;
    transform: translateX(-50%) scale(0.8);
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
  }

  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.5rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .carousel-slide.active {
    opacity: 1;
    transform: translateX(-50%) scale(1);
    z-index: 2;
  }

  .carousel-slide.prev {
    opacity: 0.5;
    transform: translateX(-125%) scale(0.8);
    z-index: 1;
  }

  .carousel-slide.next {
    opacity: 0.5;
    transform: translateX(25%) scale(0.8);
    z-index: 1;
  }

  .carousel-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 3rem;
    height: 3rem;
    background: rgba(90, 130, 178, 0.2);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .carousel-nav:hover {
    background: rgba(90, 130, 178, 0.4);
    transform: translateY(-50%) scale(1.1);
  }

  .carousel-nav svg {
    width: 1.5rem;
    height: 1.5rem;
    stroke: #fff;
  }

  .carousel-nav.prev { left: 2rem; }
  .carousel-nav.next { right: 2rem; }

  .carousel-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 1rem;
    text-align: center;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .carousel-slide.active .carousel-caption {
    transform: translateY(0);
  }
</style>

<script>
  function initCarousel() {
    const track = document.querySelector('.carousel-track');
    const slides = document.querySelectorAll('.carousel-slide');
    const total = slides.length;
    let current = 0;

    function updateSlides() {
      slides.forEach((slide, index) => {
        slide.className = 'carousel-slide';
        if (index === current) slide.classList.add('active');
        if (index === (current - 1 + total) % total) slide.classList.add('prev');
        if (index === (current + 1) % total) slide.classList.add('next');
      });
    }

    document.querySelector('.carousel-nav.prev')?.addEventListener('click', () => {
      current = (current - 1 + total) % total;
      updateSlides();
    });

    document.querySelector('.carousel-nav.next')?.addEventListener('click', () => {
      current = (current + 1) % total;
      updateSlides();
    });

    // Initial state
    updateSlides();
  }

  document.addEventListener('DOMContentLoaded', initCarousel);
</script>
