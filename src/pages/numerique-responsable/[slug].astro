---
import Layout from '../../layouts/Layout.astro';
import ProjectNavigation from '../../components/project/ProjectNavigation.astro';
import SimilarProjects from '../../components/project/SimilarProjects.astro';
import type { GetStaticPaths } from 'astro';

interface Frontmatter {
  slug: string;
  titre: string;
  title?: string;  // Pour la compatibilité avec ProjectNavigation
  lien?: string;
  technologies?: string[];
  description?: string;
  ecoconception?: string;
  accessibilite?: string;
}

type Project = {
  frontmatter: Frontmatter;
  file: string;
  Content: any;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const projets = await Astro.glob<Project>('../../content/numerique-responsable/*.md');
  return projets.map((projet) => ({
    params: { slug: projet.frontmatter.slug }
  }));
}

const { slug } = Astro.params;
const projets = await Astro.glob<Project>('../../content/numerique-responsable/*.md');
const projet = projets.find(p => p.frontmatter.slug === slug);

if (!projet) {
  throw new Error('Projet introuvable');
}

const {
  titre,
  lien,
  ecoconception,
  accessibilite,
  technologies,
  description
} = projet.frontmatter;

// Trouve les projets suivant/précédent
const projetIndex = projets.findIndex(p => p.frontmatter.slug === slug);
// Adapter les projets pour ProjectNavigation
const getProjNav = (p: typeof projet) => p ? { 
  slug: p.frontmatter.slug,
  title: p.frontmatter.titre || ''  // On utilise titre comme title
} : undefined;

const prevProjet = projetIndex > 0 ? getProjNav(projets[projetIndex - 1]) : undefined;
const nextProjet = projetIndex < projets.length - 1 ? getProjNav(projets[projetIndex + 1]) : undefined;
---

<Layout pageTitle={titre}>
  <ProjectNavigation 
    prevProject={prevProjet?.frontmatter} 
    nextProject={nextProjet?.frontmatter}
    projectType="numerique-responsable"
  />

  <article class="project-detail">
    <div class="project-header">
      <div class="project-header-content full-width">
        
        <div class="project-main-content">
          {technologies && technologies.length > 0 && (
            <div class="technologies-section">
              <h2 class="section-title">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 19l7-7 3 3-7 7-3-3z"/>
                  <path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"/>
                  <path d="M2 2l7.586 7.586"/>
                  <circle cx="11" cy="11" r="2"/>
                </svg>
                Technologies
              </h2>
              <div class="tech-list">
                {technologies.map((tech: string) => (
                  <div class="tech-chip">{tech}</div>
                ))}
              </div>
            </div>
          )}

          {description && (
            <div class="description-section">
              <h2 class="section-title">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                  <polyline points="14 2 14 8 20 8"/>
                  <line x1="16" y1="13" x2="8" y2="13"/>
                  <line x1="16" y1="17" x2="8" y2="17"/>
                </svg>
                Description
              </h2>
              <p class="description-text">{description}</p>
            </div>
          )}
        </div>

        <div class="nr-sections">
          <div class="nr-section-container">
            <h2 class="nr-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 3v18M3 12h18M12 8a4 4 0 0 1 4 4M12 16a4 4 0 0 0 4-4"/>
              </svg>
              Écoconception
            </h2>
            <div class="nr-section-content">
              {ecoconception && ecoconception.split('\n').map((point: string) => (
                <div class="nr-point">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 6L9 17l-5-5"/>
                  </svg>
                  <p>{point.replace('- ', '')}</p>
                </div>
              ))}
            </div>
          </div>

          <div class="nr-section-container">
            <h2 class="nr-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 12h-4l-3 9L9 3l-3 9H2"/>
              </svg>
              Accessibilité
            </h2>
            <div class="nr-section-content">
              {accessibilite && accessibilite.split('\n').map((point: string) => (
                <div class="nr-point">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 6L9 17l-5-5"/>
                  </svg>
                  <p>{point.replace('- ', '')}</p>
                </div>
              ))}
            </div>
          </div>
        </div>

        {lien && (
          <div class="project-link-section">
            {lien && (
              <a href={lien} rel="noopener noreferrer" class="project-link-button external-link">
                <span>Voir le projet</span>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                  <path d="M15 3h6v6"/>
                  <path d="M10 14L21 3"/>
                </svg>
              </a>
            )}
          </div>
        )}
      </div>
    </div>

    <SimilarProjects 
      currentSlug={slug}
      projectType="numerique-responsable"
      technologies={technologies}
    />
  </article>
</Layout>

<style>

</style>