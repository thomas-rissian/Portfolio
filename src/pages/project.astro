---
import Layout from '../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

// Récupère les compétences depuis src/content/about/skill/*.md
const skillDir = path.resolve(process.cwd(), 'src/content/about/skill');
const skillFiles = fs.existsSync(skillDir) ? fs.readdirSync(skillDir) : [];
const projects = await Astro.glob('../content/project/*.md');

// Récupère toutes les technos utilisées dans les projets
const allProjectTechnos = new Set(
  projects.flatMap(p => (p.frontmatter.technologies || []))
);

// Filtre les compétences pour ne garder que celles utilisées dans au moins un projet
const competences = skillFiles
  .filter((file) => file.endsWith('.md'))
  .map((file) => {
    const filePath = path.join(skillDir, file);
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const { data } = matter(fileContent);
    return {
      name: data.title,
      key: data.title.toLowerCase().replace(/\s+/g, '-'),
      technologies: (data.technologies || []).filter(tech => allProjectTechnos.has(tech)),
      order: data.order ?? 999
    };
  })
  .filter(comp => comp.technologies.length > 0)
  .sort((a, b) => a.order - b.order);

import "../../public/styles/projet-cards.css";

// Helper function to normalize technologies
function normalizeTechnologies(tech: any) {
  if (Array.isArray(tech)) return tech;
  if (typeof tech === 'object' && tech.langages) return tech.langages;
  return [];
}
---

<Layout pageTitle="Mes Projets">
  <div class="filterbar">
    <div class="filterbar-inner">
      {competences.map(comp => (
        <div class="competence-filter" data-key={comp.key} data-technos={JSON.stringify(comp.technologies)}>
          <button class="competence-filter-btn" type="button">
            <span class="competence-filter-label">{comp.name}</span>
            <span class="competence-filter-arrow">&#9662;</span>
          </button>
        </div>
      ))}
      <button class="filter-btn filter-btn-all" data-filter="all" aria-pressed="true" type="button">
        <span class="filter-btn-label">Tous les projets</span>
      </button>
    </div>
    <div id="competence-techs-zone"></div>
  </div>
  <section class="projects-grid">
    {projects.map((project, idx) => {
      const { title, image, slug, competence } = project.frontmatter;
      const technologies = normalizeTechnologies(project.frontmatter.technologies);
      
      return (
        <a
          href={`/project/${slug ?? project.file.replace('.md', '').split('/').pop()}`}
          class="project-card"
          key={idx}
          aria-label={`Voir le projet ${title}`}
          data-competence={competence ? competence.toLowerCase().replace(/\s+/g, '-') : ''}
          data-technos={technologies.join(',')}
        >
          <div class="project-card-img-wrapper">
            <img src={image ?? "/placeholder.png"} alt={title} class="project-card-img" loading="lazy" />
          </div>
          <div class="project-card-overlay">
            <div class="project-card-title">{title}</div>
            <div class="project-card-techs">
              {technologies.map(tech => (
                <span class="project-card-tech">{tech}</span>
              ))}
            </div>
          </div>
        </a>
      );
    })}
  </section>
  <script>
  let selectedTechs: string[] = [];
  let openedCompetence: string | null = null;
  let selectedCompetences: Set<string> = new Set();

  // Liste des compétences et technos (Astro côté client)
  const COMPETENCES = [
    ...Array.from(document.querySelectorAll('.competence-filter')).map(div => {
      const el = div as HTMLElement;
      return {
        key: el.dataset.key || '',
        name: (el.querySelector('.competence-filter-label') as HTMLElement)?.textContent || '',
        technos: JSON.parse(el.getAttribute('data-technos') || '[]') as string[]
      };
    })
  ];

  function toggleCompetence(key: string) {
    const comp = COMPETENCES.find(c => c.key === key);
    if (!comp) return;

    const btn = document.querySelector(`.competence-filter[data-key="${key}"] .competence-filter-btn`);
    
    // Si la compétence est déjà sélectionnée, on la désélectionne
    if (selectedCompetences.has(key)) {
      selectedCompetences.delete(key);
      selectedTechs = selectedTechs.filter(tech => !comp.technos.includes(tech));
      btn?.classList.remove('selected');
    } else {
      // Sinon on l'ajoute aux sélectionnées
      selectedCompetences.add(key);
      comp.technos.forEach(tech => {
        if (!selectedTechs.includes(tech)) {
          selectedTechs.push(tech);
        }
      });
      btn?.classList.add('selected');
    }

    filterProjects();
  }

  function resetAllSelections() {
    selectedTechs = [];
    selectedCompetences.clear();
    openedCompetence = null;
    
    document.querySelectorAll('.competence-filter-btn').forEach(btn => {
      btn.setAttribute('aria-expanded', 'false');
      btn.classList.remove('selected');
    });
    
    const zone = document.getElementById('competence-techs-zone');
    if (zone) zone.innerHTML = '';
    
    filterProjects();
  }

  function renderTechsForCompetence(key: string) {
    const comp = COMPETENCES.find(c => c.key === key);
    const zone = document.getElementById('competence-techs-zone');
    
    // Reset l'état des autres boutons
    document.querySelectorAll('.competence-filter-btn').forEach(btn => {
      btn.setAttribute('aria-expanded', 'false');
    });
    
    // Si on clique sur la même compétence, on ferme
    if (openedCompetence === key && zone) {
      zone.innerHTML = '';
      openedCompetence = null;
      return;
    }

    // Mise à jour du bouton actif
    const activeBtn = document.querySelector(`.competence-filter[data-key="${key}"] .competence-filter-btn`);
    if (activeBtn) {
      activeBtn.setAttribute('aria-expanded', 'true');
    }

    if (!comp || !zone) return;
    openedCompetence = key;

    zone.innerHTML = `
      <div class="competence-tech-list competence-tech-list-bar">
        ${comp.technos.map(tech => {
          const isSelected = selectedTechs.includes(tech);
          return `
            <button 
              class="competence-tech-chip ${isSelected ? 'selected' : ''}" 
              data-tech="${tech}"
              type="button"
            >
              ${tech}
            </button>
          `;
        }).join('')}
      </div>
    `;

    // Ajoute les listeners sur les chips
    zone.querySelectorAll('.competence-tech-chip').forEach(chip => {
      chip.addEventListener('click', (e) => {
        e.stopPropagation();
        const tech = (chip as HTMLElement).dataset.tech;
        if (!tech) return;

        const index = selectedTechs.indexOf(tech);
        if (index > -1) {
          selectedTechs.splice(index, 1);
          chip.classList.remove('selected');
        } else {
          selectedTechs.push(tech);
          chip.classList.add('selected');
        }
        filterProjects();
      });
    });
  }

  function filterProjects() {
    const projectCards = document.querySelectorAll('.project-card');
    
    if (selectedTechs.length === 0) {
      projectCards.forEach(card => (card as HTMLElement).style.display = '');
      document.querySelector('.filter-btn-all')?.setAttribute('aria-pressed', 'true');
      return;
    }

    document.querySelector('.filter-btn-all')?.setAttribute('aria-pressed', 'false');
    
    projectCards.forEach(card => {
      const cardEl = card as HTMLElement;
      const cardTechnos = (cardEl.dataset.technos || '').split(',').map(t => t.trim()).filter(Boolean);
      const show = selectedTechs.some(tech => cardTechnos.includes(tech));
      cardEl.style.display = show ? '' : 'none';
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Gestion du double-clic et clic simple
    document.querySelectorAll('.competence-filter-btn').forEach(btn => {
      let clickTimeout: number | null = null;

      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const parent = btn.closest('.competence-filter') as HTMLElement;
        if (!parent) return;
        
        const key = parent.dataset.key || '';
        
        if (clickTimeout === null) {
          clickTimeout = window.setTimeout(() => {
            // Single click
            clickTimeout = null;
            renderTechsForCompetence(key);
          }, 200);
        } else {
          // Double click
          clearTimeout(clickTimeout);
          clickTimeout = null;
          toggleCompetence(key);
        }
      });
    });

    // Click handler for "All projects" button
    document.querySelector('.filter-btn-all')?.addEventListener('click', resetAllSelections);

    // Close tech list when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (openedCompetence && !target?.closest('.competence-filter') && !target?.closest('#competence-techs-zone')) {
        const zone = document.getElementById('competence-techs-zone');
        if (zone) {
          zone.innerHTML = '';
          openedCompetence = null;
          document.querySelectorAll('.competence-filter-btn').forEach(btn => {
            btn.setAttribute('aria-expanded', 'false');
          });
        }
      }
    });
  });
  </script>
</Layout>
